# the_goods

```elixir
Mix.install([
  {:kino, "~> 0.11.3"}
])
```

## day 1

```elixir
input = Kino.Input.textarea("Name")
```

```elixir
name = Kino.Input.read(input)
```

```elixir
input = Kino.Input.file("File")
```

```elixir
value = Kino.Input.read(input)
path = Kino.Input.file_path(value.file_ref)
sample = File.read!(path)
```

### part 1

<!-- livebook:{"break_markdown":true} -->

##### sample input

```elixir
sample_data_day_1 = "1000
2000
3000

4000

5000
6000

7000
8000
9000

10000"
```

```elixir
{:ok, day_one_input} = File.read("../inputs/test.txt")
day_one_input
```

```elixir
defmodule Advent do
  def split_to_int(list) do
    list
    |> Enum.map(fn amount -> String.replace(amount, "\n", ",") end)
    |> Enum.map(fn amount -> String.split(amount, ",") end)
    |> Enum.concat()
    |> Enum.map(fn amount -> String.to_integer(amount) end)
  end
end
```

new clean way

```elixir
day_one =
  String.split(sample_data_day_1, "\n\n")
  |> Enum.map(fn x -> String.split(x, ",") end)
  |> Enum.map(fn elf_amount -> Advent.split_to_int(elf_amount) end)
  |> Enum.map(fn elf_amount -> Enum.reduce(elf_amount, fn amount, acc -> amount + acc end) end)
```

```elixir
Enum.max(day_one)
```

old UGLY way

```elixir
data = String.split(day_one_input, "\n\n")
data = Enum.map(data, fn x -> [x] end)
data = Enum.map(data, fn x -> Enum.map(x, fn y -> String.replace(y, "\n", ",") end) end)
data = Enum.map(data, fn x -> Enum.map(x, fn y -> String.split(y, ",") end) end)
data = Enum.concat(data)
data = Enum.map(data, fn x -> Enum.map(x, fn y -> String.to_integer(y) end) end)
data = Enum.map(data, fn x -> Enum.reduce(x, fn y, acc -> y + acc end) end)
data = Enum.sort(data)
List.last(data)
```

### part two

```elixir
day_one
|> Enum.sort()
|> Enum.take(-3)
|> Enum.sum()
```

## day 2

```elixir
input = Kino.Input.textarea("Paste input here:")
```

```elixir
day_two_input = Kino.Input.textarea("Day two input:")
```

A : X = 3
A : Y = 6
A : Z = 0
B : X = 0
B : Y = 3
B : Z = 6
C : X = 6
C : Y = 0
C : Z = 3

A = Rock
B = Paper
C = Scissors

X = Rock
Y = Paper 
Z = Scissors

```elixir
defmodule Two do
  def score(scores) do
    case scores do
      ["A X"] -> 3 + 1
      ["A Y"] -> 6 + 2
      ["A Z"] -> 0 + 3
      ["B X"] -> 0 + 1
      ["B Y"] -> 3 + 2
      ["B Z"] -> 6 + 3
      ["C X"] -> 6 + 1
      ["C Y"] -> 0 + 2
      ["C Z"] -> 3 + 3
    end
  end

  # rock = 1 A
  # paper =2 B
  # scissors =3 C

  def part_two([tool, "X"]) do
    case tool do
      "A" -> 3
      "B" -> 1
      "C" -> 2
    end
  end

  def part_two([tool, "Y"]) do
    case tool do
      "A" -> 1 + 3
      "B" -> 2 + 3
      "C" -> 3 + 3
    end
  end

  def part_two([tool, "Z"]) do
    case tool do
      "A" -> 2 + 6
      "B" -> 3 + 6
      "C" -> 1 + 6
    end
  end
end
```

```elixir
day_two_sample = Kino.Input.read(input)
```

```elixir
day_two = Kino.Input.read(day_two_input)
```

```elixir
String.split(day_two_sample, "\n", trim: true)
|> Enum.chunk_every(1)
|> Enum.reduce(0, fn x, acc -> Two.score(x) + acc end)
```

### part two

```elixir
String.split(day_two, "\n", trim: true)
|> Enum.chunk_every(1)
|> Enum.map(fn scores ->
  Enum.map(scores, fn score -> String.split(score, " ") end)
  |> Enum.concat()
end)
|> Enum.reduce(0, fn x, acc -> Two.part_two(x) + acc end)
```

## day 3

```elixir
three_sample_input = Kino.Input.textarea("Here")
```

```elixir
three_sample = Kino.Input.read(three_sample_input)
```

```elixir
three_input = Kino.Input.textarea("Paste input here:")
```

```elixir
day_three = Kino.Input.read(three_input)
```

```elixir
lower = for n <- ?a..?z, do: <<n::utf8>>
upper = for n <- ?A..?Z, do: <<n::utf8>>
alpha = lower ++ upper
length(alpha)
```

```elixir
defmodule Three do
  def break_down(rucksack) do
    Enum.map(rucksack, fn x -> String.graphemes(x) end)
  end

  def get_dupes(list) do
    list -- Enum.uniq(list)
  end

  def get_keys(list) do
  end
end
```

### part 1

```elixir
String.split(day_three)
|> Enum.chunk_every(1)
|> Enum.map(fn x -> Three.break_down(x) end)
|> Enum.concat()
|> Enum.map(fn x -> Enum.chunk_every(x, trunc(length(x) / 2)) end)
|> Enum.map(fn x -> Enum.map(x, fn y -> MapSet.new(y) end) end)
|> Enum.map(fn x -> MapSet.intersection(List.first(x), List.last(x)) end)
|> Enum.map(fn x -> MapSet.to_list(x) end)
|> Enum.concat()
|> Enum.map(fn x -> Enum.find_index(alpha, fn y -> y == x end) + 1 end)
|> Enum.sum()
```

```elixir
String.split(day_three)
|> Enum.chunk_every(1)
|> Enum.map(fn x -> Three.break_down(x) end)
|> Enum.concat()
|> Enum.map(fn x -> Enum.chunk_every(x, trunc(length(x) / 2)) end)
|> Enum.map(fn x -> Enum.map(x, fn y -> Enum.uniq(y) end) end)
|> Enum.map(fn x -> Enum.concat(x) end)
|> Enum.map(fn x -> Three.get_dupes(x) end)
|> Enum.concat()
|> Enum.map(fn x -> Enum.find_index(alpha, fn y -> y == x end) + 1 end)
|> Enum.sum()
```

```elixir
trunc(String.length("jqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL") / 2)
```

### part 2

```elixir
threes =
  String.split(day_three)
  |> Enum.chunk_every(1)
  |> Enum.map(fn x -> Three.break_down(x) end)
  |> Enum.concat()
  |> Enum.map(fn y -> MapSet.new(y) end)
  |> Enum.chunk_every(3)
  |> Enum.map(fn x -> Enum.chunk_every(x, 2) end)
  |> Enum.map(fn x ->
    Enum.map(x, fn y -> MapSet.intersection(List.first(y), List.last(y)) end)
  end)
  |> Enum.map(fn x -> MapSet.intersection(List.first(x), List.last(x)) end)
  |> Enum.map(fn x -> MapSet.to_list(x) end)
  |> Enum.concat()
  |> Enum.map(fn x -> Enum.find_index(alpha, fn y -> y == x end) + 1 end)
  |> Enum.sum()
```

## day 4

### part 1

```elixir
four_sample_input = Kino.Input.textarea("Here")
```

```elixir
four_day_input = Kino.Input.textarea("Here")
```

```elixir
day_four = Kino.Input.read(four_day_input)
```

```elixir
four_sample = Kino.Input.read(four_sample_input)
```

```elixir
defmodule Four do
  def compare_maps(map1, map2) do
    MapSet.subset?(map1, map2) || MapSet.subset?(map2, map1)
  end

  def overlap_maps(map1, map2) do
    MapSet.disjoint?(map1, map2) || MapSet.disjoint?(map2, map1)
  end
end
```

```elixir
String.split(day_four, "\n", trim: true)
|> Enum.map(fn pairs -> String.split(pairs, ",") end)
|> Enum.map(fn pairs -> Enum.map(pairs, fn y -> String.split(y, "-") end) end)
|> Enum.concat()
|> Enum.map(fn pairs -> Enum.map(pairs, fn y -> String.to_integer(y) end) end)
|> Enum.map(fn pairs -> MapSet.new(List.first(pairs)..List.last(pairs)) end)
|> Enum.chunk_every(2)
|> Enum.map(fn pairs -> Four.compare_maps(List.first(pairs), List.last(pairs)) end)
|> Enum.count(fn x -> x == true end)
```

### part 2

```elixir
String.split(day_four, "\n", trim: true)
|> Enum.map(fn pairs -> String.split(pairs, ",") end)
|> Enum.map(fn pairs -> Enum.map(pairs, fn y -> String.split(y, "-") end) end)
|> Enum.concat()
|> Enum.map(fn pairs -> Enum.map(pairs, fn y -> String.to_integer(y) end) end)
|> Enum.map(fn pairs -> MapSet.new(List.first(pairs)..List.last(pairs)) end)
|> Enum.chunk_every(2)
|> Enum.map(fn pairs -> Four.overlap_maps(List.first(pairs), List.last(pairs)) end)
|> Enum.count(fn x -> x == false end)
```

## day 5

### part 1

```elixir
five_sample_input = Kino.Input.textarea("five sample")
```

```elixir
five_sample = Kino.Input.read(five_sample_input)
```

```elixir
[stacks | moves] = String.split(five_sample, "\n\n")
```

```elixir
stacks =
  String.split(stacks, "\n")
  |> Enum.drop(-1)
  |> Enum.map(fn x -> String.replace(x, " [", ",[") end)
  |> Enum.map(fn x -> String.replace(x, "] ", "],") end)
  |> Enum.map(fn x -> String.split(x, ",") end)
  |> List.zip()
  |> Enum.map(fn x -> Tuple.to_list(x) end)
  |> Enum.map(fn x -> Enum.drop_while(x, fn y -> y == "   " end) end)
  |> Enum.map(fn x -> Enum.map(x, fn y -> String.replace(y, "[", "") end) end)
  |> Enum.map(fn x -> Enum.map(x, fn y -> String.replace(y, "]", "") end) end)

crates = Enum.zip([1, 2, 3], stacks)

stacks = Map.new(crates)
```

```elixir
moves =
  Enum.map(moves, fn x -> String.split(x, "\n") end)
  |> Enum.concat()
  |> Enum.map(fn x -> String.split(x, " ") end)
  |> Enum.map(fn x -> Enum.drop_every(x, 2) end)
  |> Enum.map(fn x -> Enum.map(x, fn y -> String.to_integer(y) end) end)
```

```elixir
crates = ["E", "F"]
```

```elixir
defmodule Four do
  def move_crates(stacks, crates) do
    Map.update(stacks, 1, crates, &place_crates_on_stack(crates, &1))

    # Enum.map(moves, fn [amount, from, to] -> 
    #   {crates, stack} = pop_in(stacks, [from, Access.slice(0..(amount-1))])
    # end)
    # Enum.reduce(moves, fn [amount, from, to], stacks -> 
    #   {crates, stacks} = pop_in(stacks, [from, Access.slice(0..(amount - 1))])
    #   Map.update(stacks, to, crates, fn {crates, stacks} -> stack_crates(crates, stacks) end)
    # end)
  end

  #   def operate(model, stacks, instructions) do
  #   instructions
  #   |> Enum.reduce(stacks, fn [amount, from, to], stacks ->
  #     {crates, stacks} = pop_in(stacks, [from, Access.slice(0..(amount - 1))])
  #     Map.update(stacks, to, crates, &place_crates_on_stack(model, crates, &1))
  #   end)
  #   |> Map.values()
  #   |> Enum.map(&hd/1)
  #   |> Enum.join()
  # end

  # defp stack_crates(crates, stacks) do
  #   Enum.reverse(crates) ++ stacks
  # end

  defp place_crates_on_stack(crates, stack) do
    IO.inspect(stack, label: :label)
  end
end
```

```elixir
Four.move_crates(stacks, crates)
```

```elixir
{start, instructions} =
  String.split(five_sample, "\n")
  |> Enum.split_while(&(&1 != ""))
```

```elixir
stacks =
  start
  |> Enum.reverse()
  |> tl()
  |> Enum.flat_map(fn level ->
    level
    |> String.graphemes()
    |> Enum.chunk_every(3, 4, :discard)
    |> Enum.with_index(1)
  end)
  |> Enum.reduce(%{}, fn
    {["[", crate, "]"], stack_nr}, acc -> Map.update(acc, stack_nr, [crate], &[crate | &1])
    _, acc -> acc
  end)
```

```elixir
instructions =
  instructions
  |> tl()
  |> Enum.flat_map(&String.split(&1, ~r{[\D]}, trim: true))
  |> Enum.map(&String.to_integer/1)
  |> Enum.chunk_every(3)
```

```elixir
defmodule CrateMover do
  def operate(model, stacks, instructions) do
    instructions
    |> Enum.reduce(stacks, fn [amount, from, to], stacks ->
      {crates, stacks} = pop_in(stacks, [from, Access.slice(0..(amount - 1))])
      Map.update(stacks, to, crates, &place_crates_on_stack(model, crates, &1))
    end)
    |> Map.values()
    |> Enum.map(&hd/1)
    |> Enum.join()
  end

  defp place_crates_on_stack(:cm9000, crates, stack), do: Enum.reverse(crates) ++ stack
  defp place_crates_on_stack(:cm9001, crates, stack), do: crates ++ stack
end
```

```elixir
CrateMover.operate(:cm9000, stacks, instructions)
```

```elixir
foo = %{name: "Elixir", creator: "Valim"}
Access.pop(foo, :name)
```

```elixir
users = %{"john" => %{age: 27}, "meg" => %{age: 23}}
pop_in(users, ["john", :age])
```

```elixir
list = [1, 2, 3, 4]

Enum.map(list, &nil)
```
